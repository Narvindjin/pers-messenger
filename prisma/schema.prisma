// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Chat {
    id          String      @id @default(uuid())
    messages    Message[]
    createdAt   DateTime @default(now())
    lastChecked DateTime @updatedAt
    members     User[]
}

model Invite {
  id        String      @id @unique @default(cuid())
  from      User        @relation("fromInvite", fields: [fromId], references: [id], onDelete: Cascade)
  to        User        @relation("toInvite", fields: [toId], references: [id], onDelete: Cascade)
  fromId    String
  toId      String
}

model Message {
  id        String      @id @unique @default(cuid())
  postDate  DateTime    @default(now())
  content   String
  from      User        @relation("fromUser", fields: [fromId], references: [id], onDelete: Cascade)
  to        User        @relation("toUser", fields: [toId], references: [id], onDelete: Cascade)
  fromId    String
  toId      String
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  fromMessages  Message[] @relation("fromUser")
  toMessages    Message[] @relation("toUser")
  friends       User[] @relation("friends")
  friendOf      User[] @relation("friends")
  incomingInvites   Invite[] @relation("toInvite")
  outgoingInvites   Invite[] @relation("fromInvite")
  chats         Chat[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}